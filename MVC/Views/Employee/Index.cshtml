@model MVC.ModelView.EmployeeCreateView

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link href="https://cdn.datatables.net/1.13.1/css/jquery.dataTables.css" rel="stylesheet" />
<link href="https://cdn.jsdelivr.net/npm/sweetalert2@11.6.16/dist/sweetalert2.min.css" rel="stylesheet" />
<link href="~/Content/font-awesome.min.css" rel="stylesheet" />
<link href="~/Content/toastr.min.css" rel="stylesheet" />

<h2>Employees</h2>

<div class="row">
    <button class='btn btn-sm btn-primary mt-2' data-toggle='modal' data-target='#insert-book-modal'>Add Book</button>
    <div class="modal fade" id="insert-book-modal">
        <div class="modal-dialog">
            <div class="modal-content">

                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <h4 class="modal-title">Insert Employee</h4>

                </div>

                <div class="modal-body">
                    @using (Html.BeginForm(null, null, FormMethod.Post, new { @class = "", enctype = "multipart/form-data" }))
                    {

                        <div class="row container-fluid">

                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            <div class="form-group">
                                <label for="InsertName">Fullname : @Html.ValidationMessageFor(model => model.Fullname, "", new { @class = "text-danger" }) </label>
                                <br />
                                @Html.EditorFor(model => model.Fullname, new { @class = "form-control" })
                            </div>

                            <div class="form-group">
                                <label for="Address">Address : @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" }) </label>
                                <br />
                                @Html.EditorFor(model => model.Address, new { @class = "form-control" })
                            </div>
                            <div class="form-group">
                                <label for="Phone">Phone : @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" }) </label>
                                <br />
                                @Html.EditorFor(model => model.Phone, new { @class = "form-control" })
                            </div>

                            <button type="submit" class="btn btn-primary">Insert</button>
                            <button type="button" class="btn btn-danger float-right" data-dismiss="modal">Cancel</button>

                        </div>
                    }


                </div>

            </div>
        </div>
    </div>
</div>

<br />

<div class="row">

    <table class="table table-striped" id="myTable">
        <thead class="bg-info">
            <tr>
                <th scope="col">Id</th>
                <th scope="col">Fullname</th>
                <th scope="col">Update</th>
                <th scope="col">Edit</th>
                <th scope="col">Delete</th>
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>
</div>

<div class="row">

    <div class="modal fade" id="edit-book-modal">
        <div class="modal-dialog">
            <div class="modal-content">

                <!-- Modal Header -->
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <h4 class="modal-title">Edit Book</h4>

                </div>

                <!-- Modal body -->
                <div class="modal-body">
                    @using (Html.BeginForm(null, null, FormMethod.Post, new { @class = "", enctype = "multipart/form-data", @id = "UpdateEmployee" }))
                    {
                        <input type="hidden" name="Id" id="#UpdateId" />
                        <div class="form-group">
                            <label for="UpdateName">Full Name</label>
                            <input class="form-control" type="text" id="UpdateName" name="UpdateName">
                        </div>

                        <button type="submit" class="btn btn-primary">Update</button>
                        <button type="button" class="btn btn-danger float-right" data-dismiss="modal">Cancel</button>
                    }

                </div>

            </div>

        </div>

    </div>

</div>

@section scripts{
    <script src="https://cdn.datatables.net/1.13.1/js/jquery.dataTables.js"></script>
    <script src="https://cdn.datatables.net/1.13.1/js/dataTables.bootstrap.min.js"></script>
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.6.16/dist/sweetalert2.all.min.js"></script>
    <script src="~/Scripts/jquery-ui-1.13.2.min.js"></script>
    <script src="~/Scripts/toastr.min.js"></script>
    <script src="~/Scripts/moment.min.js"></script>

    <script>
        var table
        //แทนค่าตัวหนังสือ
        String.prototype.format = function () {
            a = this;
            for (k in arguments) {
                a = a.replace("{" + k + "}", arguments[k])
            }
            return a
        }

        function activatejQueryTable() {
            if (table != null) {
                table.clear()
                table.destroy()

            }


            //สร้าง table
            table = $("#myTable").DataTable({
                pageLength: 10,
                dom: 'Bfrtip',
                /*scrollY: 500,*/
                scrollCollapse: true,
                searching: true,
                paging: true,
                order: [[0, "asc"]],
                language: {
                    decimal: ",",
                    thousands: "."
                },
                // ให้ ajax เรียกใช้ฟังก์ชั่น GetItemList จาก contrller ดึงข้อมูลลง table
                ajax: {
                    url: "@(Url.Action("TableEmployee"))",
                    dataSrc: "",
                    //data: { id: $('#Id').val() },
                    type: 'POST',

                },

                columns: [
                    {
                        data: "Id",
                        //ทำคำสั่งสร้างอันดับจากข้อมูลในdatabase
                        render: function (data, type, row, meta) {
                            return meta.row + meta.settings._iDisplayStart + 1;
                        }
                    },
                    {
                        data: "Fullname"
                    },
                    {
                        data: "ModifiedDate",
                        render: function (data) {
                            return moment(data).format("DD-MM-YYYY HH:mm:ss");
                        }

                    },
                    {
                        data: "Id",
                        className: "editItem",
                        render: function (data) {
                            return '<a href=# class="btn btn-warning" onclick="ModalEditFunction({0})"> <i class=\"fa fa-edit \"></i> </a>'.format(data)
                        }
                    },
                    {
                        data: "Id",
                        className: "deleteItem",
                        render: function (data) {
                            return '<a href=# class="btn btn-danger" onclick="DeleteFunction({0})"> <i class=\"fa fa-trash \"></i> </a>'.format(data)

                        }
                    }

                ],

            })
        }

        $(document).ready(function () {
            activatejQueryTable()

            @*$('#insertEmployee').validate({
                errorClass: 'input-validation-error',
                rules: {

                    InsertName: {
                        required: true, maxlength: 50,
                    },

                },

                messages: {
                    InsertName:
                    {
                        required: '<p style="color: red;"> *Please enter a valid Name. <p>',
                        maxlength: 'Name exceed 50 chars !'
                    },

                },
                submitHandler: function (form) {

                    var ajaxConfig = {
                        type: "post",
                        url: "@(Url.Action("CreateEmployee"))",
                        data: {

                            Fullname: $('#InsertName').val()

                        },
                        success: function (response) {
                            if (response.success) {
                                console.log(response.data)
                                table.ajax.reload()
                                /*alert("update")*/
                                clearName = "";
                                $('#InsertName').val(clearName)
                                $('#insert-book-modal').modal('hide')

                                toastr["success"]("Employee is create..")

                            }
                            else {
                                toastr['error'](response.Message)
                            }
                        }
                    }
                    $.ajax(ajaxConfig)
                    /*console.log('Con: ' + $('#UpdateTitle').val())*/

                }
            })

            //$('#insertEmployee').submit(function (e) {

            //    e.preventDefault()
            //})*@


            $('#UpdateEmployee').validate({
                errorClass: 'input-validation-error',
                rules: {

                    UpdateName: {
                        required: true, maxlength: 50,
                    },

                },

                messages: {
                    UpdateName:
                    {
                        required: '<p style="color: red;"> *Please enter a valid Name. <p>',
                        maxlength: 'Name exceed 50 chars !'
                    },

                },
                submitHandler: function (form) {

                    var ajaxConfig = {
                        type: "post",
                        url: "@(Url.Action("EditEmployee"))",
                        data: {
                            Id: $('#Id').val(),
                            Fullname: $('#UpdateName').val()

                        },
                        success: function (response) {
                            if (response.success) {
                                console.log(response.data)
                                table.ajax.reload()
                                /*alert("update")*/
                                $('#edit-book-modal').modal('hide')

                                toastr["success"]("Employee is create..")

                            }
                            else {
                                toastr['error'](response.Message)
                            }
                        }
                    }
                    $.ajax(ajaxConfig)
                    /*console.log('Con: ' + $('#UpdateTitle').val())*/

                }
            })

            $('#UpdateEmployee').submit(function (e) {

                e.preventDefault()
            })
        });

        //ทำฟังชั่นเคลียร์ค่า table เพื่อให้ table รับค่าใหม่ที่พึ่งส่งเข้าไป

        function ModalEditFunction(id)
        {
            var ajaxConfig = {
                type: 'post',
                url: "@(Url.Action("GetEmployee"))",
                data: { id: id },
                success: function (response) {
                    if (response.success) {
                        console.log(response.data)
                        $('#UpdateId').val(response.data[0].Id)
                        $('#UpdateName').val(response.data[0].Fullname)

                    }
                    else
                    {
                        toastr['error'](response.data)
                    }
                }
            }
            $.ajax(ajaxConfig)

            $('#edit-book-modal').modal()

        }

        function DeleteFunction(id)
        {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.value) {
                    $.ajax({
                        url: '@Url.Action("DeleteEmployee")',
                        type: 'POST',
                        data: { id: id}
                    }).done(function (data) {
                        if (data.Result == "OK") {
                            Swal.fire(
                                'Deleted!',
                                'Your item has been deleted.',
                                'success'
                            )
                            //reload ค่า table ให้ทำการรับค่าใหม่
                            table.ajax.reload()

                        }

                    }).fail(function () {
                         Swal.fire(
                                'Error!',
                                'There is something wrong. Please try again.',
                                'error'
                            )
                    })

                }
            })
        }

    </script>




}